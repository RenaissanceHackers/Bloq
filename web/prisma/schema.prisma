// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           Int            @id @default(autoincrement())
    username     String
    address      String         @unique
    posts        Post[]
    followers    User[]         @relation("UserFollowers")
    following    User[]         @relation("UserFollowers")
    tasks        Task[]
    twitter      String
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    Comment      Comment[]
    avatart      String
    AcceptedTask AcceptedTask[]
}

model Post {
    id        Int       @id @default(autoincrement())
    title     String
    content   String?
    userId    Int
    user      User      @relation(fields: [userId], references: [id])
    likes     Int       @default(0)
    saves     Int       @default(0)
    views     Int       @default(0)
    comments  Comment[]
    taskId    Int?
    task      Task?     @relation(fields: [taskId], references: [id])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Task {
    id           Int            @id @unique @default(autoincrement())
    title        String
    description  String
    expiryDate   DateTime
    token        Boolean
    tokenAmount  String?
    pointAmount  String?
    tokenName    String?
    contribution String
    status       String
    posts        Post[]
    userId       Int
    user         User           @relation(fields: [userId], references: [id])
    taskTwitter  String?
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    AcceptedTask AcceptedTask[]
}

model Comment {
    id        Int      @id @default(autoincrement())
    content   String
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    postId    Int
    post      Post     @relation(fields: [postId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model AcceptedTask {
    id         Int      @id @default(autoincrement())
    userId     Int
    taskId     Int
    acceptedAt DateTime @default(now())
    user       User     @relation(fields: [userId], references: [id])
    task       Task     @relation(fields: [taskId], references: [id])

    @@unique([userId, taskId])
}
